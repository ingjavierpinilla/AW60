#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

#define Vkbi1 22
#define	Vrti1 25
/* define cuando un led esta encendido o apagado*/
#define ON	1
#define OFF	0

/* define entrada y salida*/
#define OUT	1
#define IN	0

/* define los leds*/
#define LED_VERDE PTBD_PTBD0
#define LED_AMARILLO PTBD_PTBD1
 /*define los pulsadores*/
#define PERSONA PTGD_PTGD1
#define PUERTA PTDD_PTDD3
#define VENT1 PTGD_PTGD2
#define VENT2 PTDD_PTDD2

void configuracion (void);
void configuracion_KBI (void);
void configuracion_RTI(void);
void led_amarillo(void);
void delay(int x);

int estado, cont1, cont2, contaux, contauxaux;

void main(void) {
	configuracion();
	configuracion_KBI();
	configuracion_RTI();
	EnableInterrupts;
	
	cont1=0;
	cont2=0;
	contaux=0;
	estado=0;
	
  for(;;) {
    led_amarillo();
    SRTISC_RTIE=1;
    KBI1SC_KBIE=1;
  } 

}

void delay(int x){
	int n;
	for(n=0 ; n<x ; n++) {
	}
}

void configuracion (void){
	SOPT=0x40;
	PTGDD=!(PTGDD_PTGDD1_MASK|PTGDD_PTGDD2_MASK);
	PTDDD=!(PTDDD_PTDDD2_MASK|PTDDD_PTDDD3_MASK);
	PTGPE=(PTGPE_PTGPE1_MASK|PTGPE_PTGPE2_MASK);
	PTDPE=(PTDPE_PTDPE2_MASK|PTDPE_PTDPE3_MASK);
	PTBDD=(PTBDD_PTBDD0_MASK|PTBDD_PTBDD1_MASK);
	PTBD=!(PTBD_PTBD0_MASK|PTBD_PTBD1_MASK);
}

void configuracion_KBI (void){
	KBI1SC=(KBI1SC_KBIMOD_MASK|KBI1SC_KBIE_MASK|KBI1SC_KBACK_MASK);
	delay(150);
	KBI1PE=(KBIPE_KBIPE1_MASK|KBIPE_KBIPE2_MASK|KBIPE_KBIPE5_MASK|KBIPE_KBIPE6_MASK);
}

interrupt Vkbi1 void rutina_KBI(void){
	KBI1SC=(KBI1SC_KBACK_MASK|!KBI1SC_KBIE_MASK);
	if ((!PERSONA|!PUERTA|!VENT1|!VENT2)!=0) {
		estado=0;
	} else if ((PERSONA)!=1) {
		estado=1;
	} else {
		estado=2;
	}
}

void configuracion_RTI (void){
	SRTISC=(SRTISC_RTIS0_MASK|SRTISC_RTIS1_MASK|SRTISC_RTIS2_MASK|!SRTISC_RTICLKS_MASK|SRTISC_RTIE_MASK|SRTISC_RTIACK_MASK);	
}

interrupt Vrti1 void rutina_RTI(void){
	SRTISC=(SRTISC_RTIACK_MASK|!SRTISC_RTIE_MASK);
	contaux=cont1;
	if(cont1==0){
		cont1=1;
	}else{cont1=0;
	}
	if(contaux<cont1){
		if(cont2==0){
				cont2=1;
		}else{cont2=0;
		}
	}
}



void led_amarillo(void){
	
	switch (estado) {
		case 0:
			LED_VERDE=ON;
			LED_AMARILLO=OFF;
			break;
			
		case 1:
			
				LED_VERDE=OFF;
				if(cont1==1){
					LED_AMARILLO=ON;
				}
				if(cont1==0){
					LED_AMARILLO=OFF;
				}
			break;
			
		case 2:
			
				LED_VERDE=OFF;
				if(cont2==1){
					LED_AMARILLO=ON;
				}
				if(cont2==0){
					LED_AMARILLO=OFF;
				}
			break;
	}
	
}
