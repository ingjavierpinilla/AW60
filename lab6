//*******************************************************************
//* Universidad Nacional de Colombia                                *
//* Facultad de ingeniería mecánica y mecatrónica                   *
//* Microcontroladores 2018-I                                       *
//* Programador:                                                    *
//* -Sebastian Cepeda Espinosa                                      *
//* -Javier Mauricio Pinilla Garcia				    *
//* -Carlos David Caballero					    *
//* Version: 3.0                                                    *
//* Microcontrolador: MC9S08QG8CPBE                                 *
//* Codigo para usar un oscilador externo al uC con el fin de       *
//* configurar la frecuencia de encendido y apago de 2 LEDs,	    *
//* de acuerdo al estado de 4 pulsadores		            *
//*******************************************************************

#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

#define Vkbi1 18
#define	Vrti1 23
/* define cuando un led esta encendido o apagado*/
#define ON	1
#define OFF	0

/* define entrada y salida*/
#define OUT	1
#define IN	0

/* define los leds*/
#define LED_VERDE PTBD_PTBD2
#define LED_AMARILLO PTBD_PTBD3
 /*define los pulsadores*/
#define PERSONA PTAD_PTAD0
#define PUERTA PTAD_PTAD1
#define VENT1 PTAD_PTAD2
#define VENT2 PTAD_PTAD3

void configuracion (void);
void configuracion_RTI (void);
void configuracion_KBI (void);
void configuracion_ICG (void);
void configuracion_puertos(void);
void ver_KBIF(void);
void delay(int x);

int cont,estado, cont1, cont2, contaux, contauxaux;

void main(void) {
	
	configuracion_ICG();
	configuracion_RTI();
	configuracion_KBI();
	configuracion();
	EnableInterrupts;
	
	cont=0;
	cont1=0;
	cont2=0;
	contaux=0;
	estado=0;
  for(;;) {
	  ver_KBIF();
	  //LED_VERDE=!LED_VERDE;
	  
  }
}

interrupt Vrti1 void rutina_RTI(void){
	SRTISC=(SRTISC|SRTISC_RTIACK_MASK);
	cont++;
	if(cont==260){
		
		SRTISC=(SRTISC|SRTISC_RTIACK_MASK);
			contaux=cont1;
			if(cont1==0){
				cont1=1;
			}else{cont1=0;
			}
			if(contaux<cont1){
				if(cont2==0){
						cont2=1;
				}else{cont2=0;
				}
			}
			
			
			switch (estado) {
					case 0:
						LED_VERDE=ON;
						LED_AMARILLO=OFF;
						break;
						
					case 1:
						
							LED_VERDE=OFF;
							if(cont1==1){
								LED_AMARILLO=ON;
							}
							if(cont1==0){
								LED_AMARILLO=OFF;
							}
						break;
						
					case 2:
						
							LED_VERDE=OFF;
							if(cont2==1){
								LED_AMARILLO=ON;
							}
							if(cont2==0){
								LED_AMARILLO=OFF;
							}
						break;
				}
		
		cont=0;
	}
}

interrupt Vkbi1 void rutina_KBI(void){
	//KBI1SC=(KBI1SC_KBACK_MASK|!KBI1SC_KBIE_MASK);
	
	KBISC_KBIE=0;
	KBISC_KBACK=1;
	
	if ((PERSONA|PUERTA|VENT1|VENT2)!=1) {
		estado=0;
	} else if ((PERSONA)!=1) {
		estado=1;
	} else {
		estado=2;
	}
	
}


///////////////////////////////////////////////////////////////////////////////
// configura pines PTBD0 y PTBD1 como salidas y asigna el valor 0 de inicio
//	SOPT
// Bit 7 COPE = 0 COP watchdog timer disabled
// Bit 6 COPT = 1 Long timeout period selected (218 cycles of BUSCLK).
///////////////////////////////////////////////////////////////////////////////
void configuracion (void){
	SOPT1=SOPT1_COPT_MASK;
	PTADD=!(PTADD_PTADD0_MASK|PTADD_PTADD1_MASK|PTADD_PTADD2_MASK|PTADD_PTADD3_MASK);
	PTBDD=(PTBDD_PTBDD2_MASK|PTBDD_PTBDD3_MASK);
	PTAPE=(PTAPE_PTAPE0_MASK|PTAPE_PTAPE1_MASK|PTAPE_PTAPE2_MASK|PTAPE_PTAPE3_MASK);
	PTBD=!(PTBD_PTBD2_MASK|PTBD_PTBD3_MASK);
}

/////////////////////////////////////////////////////////////////////////////////
// ICGC2
// BDIV=000 Encoding 0 — Divides selected clock by 1
// RANGE=1 High frequency range selected for the external oscillator
// HGO=1 Configure external oscillator for high gain operation
// EREFS=1  Oscillator requested
// ERCLKEN= 1 ICSERCLK active
/////////////////////////////////////////////////////////////////////////////////


void configuracion_ICG (void){
	ICSC2=(ICSC2_HGO_MASK|ICSC2_RANGE_MASK|ICSC2_EREFS_MASK|ICSC2_ERCLKEN_MASK);
	while(ICSSC_OSCINIT == 0);
}

/////////////////////////////////////////////////////////////////////////////////
// RTIACK = 1 (write 1 to clear RTIF)
// RTICLKS = 1 Real-time interrupt request clock source is external clock
// RTIE = 1 Real-time interrupts enabled
// RTIS = 1,1,1 text x 32768
/////////////////////////////////////////////////////////////////////////////////
void configuracion_RTI (void){
	SRTISC=(SRTISC_RTIS0_MASK|SRTISC_RTIS1_MASK|SRTISC_RTIS2_MASK|SRTISC_RTIE_MASK|SRTISC_RTIACK_MASK|SRTISC_RTICLKS_MASK);	
}

void configuracion_KBI (void){
	KBISC=(KBISC_KBIMOD_MASK|KBISC_KBIE_MASK|KBISC_KBACK_MASK);
	delay(150);
	KBIPE=(KBIPE_KBIPE0_MASK|KBIPE_KBIPE1_MASK|KBIPE_KBIPE2_MASK|KBIPE_KBIPE3_MASK);
}

void ver_KBIF(void){
	if ((PERSONA&PUERTA&VENT1&VENT2)==1) {
		estado=0;
		KBISC_KBIE=1;
	}
}

void delay(int x){
	int n;
	for(n=0 ; n<x ; n++) {
	}
}
