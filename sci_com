//*******************************************************************
//* Universidad Nacional de Colombia                                *
//* Facultad de ingeniería mecánica y mecatrónica                   *
//* Microcontroladores 2018-I                                       *
//* Programador:                                                    *
//* -Sebastian Cepeda Espinosa                                      *
//* -Javier Mauricio Pinilla Garcia				    				*
//* -Carlos David Caballero					    					*
//* Version: 1.0                                                    *
//* Microcontrolador: MC9S08QG8CPBE                                 *
//* Codigo para usar un oscilador externo al uC con el fin de       *
//* configurar la frecuencia de encendido y apago de 2 LEDs,	    *
//* de acuerdo al estado de 4 pulsadores		            *
//*******************************************************************

#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

#define emisor PTBD_PTBD0 

int delay;		// inicialización de variable para ciclos de función retardo
int estado;		// Variable que identifica el estado en que se encuentra
char ruido;		// Lectura realizada con el emisor IR apagado
char senal;		// Lectura realizada con el emisor IR encendido
char valor;		// Diferencia entre senal y ruido

//Declaración de los mpetodos que se emplean
void configuracion_init();	
void configuracion_ADC();
void configuracion_SCI();
void retardo(int cont);

void main(void) {
	configuracion_init();	
	configuracion_ADC();
	configuracion_SCI();
	
	for(;;){
		if(estado==0){		//Configuración del emisor de acuerdo al estado de lectura
			emisor = 1;
		}else{
			emisor = 0;
		}
		if(estado == 0){	//En el estado 0 se lee el receptor IR son el emisor encendido 
			senal = ADC1RL;
			retardo(10);	// retardo para garantizar la lectura del ADC
			estado=1;
		}else{
					//En el estado 1 se lee el receptor IR son el emisor encendido 
			ruido = AD1RL;
			retardo(10);	// retardo para garantizar la lectura del ADC
			valor = senal - ruido;	//calcular la señal sin afectación de la luz ambiente
			estado = 0;
		}
			
		SCI2D=valor;		//El registro SCI2D contiene el valor que es enviado por comunicación Serial 
		while(SCI2S1_TC==0){} //Espera mientras se envía el registro
		for(delay = 0;delay <=20000;delay++){} // Espera para estabilizar config  //Delay para limitar la frecuencia (limitación de impuesta por el programa de lectura en Processing)
	}
}

void configuracion_init(){
		SOPT=0x40;
		// WatchDog desactivado 
		// COPT1 = tiempo de muestreo de WatchDog largo
		estado = 0;	
		ruido = 0x00;
		senal = 0x00;
		PTBDD=(PTBDD_PTBDD0_MASK); //Pin PTB0 Salida
}

void configuracion_ADC(){
	////*****************************************
	// Conversion complete interrupt disabled
	// Continuous Conversion Enable
	////******************************
	ADC1SC1_ADCO = 1; 
	
	////*****************************************
	// High speed configuration
	// internal clock ADCK = Input clock
	// Short Sample Time Configuration
	// 8-bit conversion mode (N=8)
	// Input clock =Bus CLock
	////******************************
	ADC1CFG = 0x00;
	
	////*****************************************
	// Input Channel Select = PTD2 =  AD1P10
	////******************************
	ADC1SC1 = (ADC1SC1_ADCO_MASK| ADC1SC1_ADCH1_MASK | ADC1SC1_ADCH3_MASK); 
	
	retardo(1000); // Espera que se estabilice el ADC
}

void retardo(int cont){
	int n;
	for(n=0; n<cont; cont++);
}

void configuracion_SCI(void){
	////*****************************************
	// comunicacion a 9600 baudios
	// SCI baud rate = BUSCLK/(16xBR)
	// BUSCLK = 4MHz
	// 9600= 4.000.000/(16*26)
	// SBR=0000000011010
	////******************************
	SCI2BDH=0x00;
	SCI2BDL=0b00011010;
	////*****************
	//
	//7 LOOPS =0 RxD and TxD use separate pins.
	//6 SCISWAI =0 SCI clocks continue to run in wait mode so the SCI can be the source of an interrupt that wakes up the CPU
	//5 RSRC =0 This bit has no meaning or effect unless the LOOPS bit is set to 1
	//4 M =0 Bit or 8-Bit Mode Select, Normal — start + 8 data bits (LSB First) + stop.
	//3 WAKE =0 Idle-line wakeup
	//2 ILT =0 Idle character bit count starts after start bit.
	//1 PE =0 No hardware parity generation or checking.
	//0 PT =0 Even parity.
	////*****************

	SCI2C1=0x00;

	////*****************
	//
	//7 TIE =0 Transmit Interrupt Enable (for TDRE), Hardware interrupts from TDRE disabled (use polling).
	//6 TCIE =0 Transmission Complete Interrupt Enable (for TC), Hardware interrupts from TC disabled (use polling).
	//5 RIE =0 Receiver Interrupt Enable (for RDRF), Hardware interrupts from RDRF disabled (use polling).
	//4 ILIE =0 Idle Line Interrupt Enable (for IDLE), Hardware interrupts from IDLE disabled (use polling)
	//3 TE =1 Transmitter on.
	//2 RE =1 Receiver on.
	//1 RWU =0 Normal SCI receiver operation.
	//0 SBK =0 Normal transmitter operation.
	////*****************

	SCI2C2=(SCI2C2_RE_MASK|SCI2C2_TE_MASK);

	////*****************
	//
	//7 R8 =0 
	//6 T8 =0 
	//5 TXDIR =0 This bit has no meaning or effect unless the LOOPS bit is set to 1
	//4 TXINV1 =0 Transmit data not inverted
	//3 ORIE =0 Overrun interrupts disabled (use polling).
	//2 NEIE =1 Noise Error, hardware interrupt requested when NF = 1.
	//1 FEIE =0 Framing Error Interrupt disabled (use polling). 
	//0 PEIE =0 Parity error, PF interrupts disabled (use polling).
	////*****************

	SCI2C3=(SCI2C3_NEIE_MASK);
	
}
