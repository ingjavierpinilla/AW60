;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
            

; export symbols
            XDEF _Startup, main, rutinaRTC
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on
            
            
            
            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition
times: SECTION 

period_minh:		ds.b   1
period_minl:		ds.b   1
period_segh:		ds.b   1
period_segl:		ds.b   1
period1_flag:		ds.b   1



; =============== Rutina RTC ==========================
rutinaRTC:  pshh
            lda      SRTISC
            ora      #%01000000
            sta      SRTISC                    ; Borra la bandera de interrupcion
            
            ;rutina de interrupcion
            lda		period_segl
            inca
            sta		period_segl
            
            pulh
            rti		

; code section
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
            lda   #$52
			sta   SOPT ; Desactivar watchdog
            jsr	   configRTC
            lda    #$00
            sta    period_minh
            sta    period_minl
            sta    period_segh
            sta    period_segl
            sta	   period1_flag
			CLI			; enable interrupts

mainLoop:
            ; Insert your code here
            NOP
        
			jmp		crono
            
            BRA    mainLoop
            
crono:
			lda 	period_segl
			cmp 	#$09
			beq		segl_lim
			
			lda		period_segh
			cmp 	#$06
			beq		segh_lim
			
			lda		#$04
			cmp		period_minh
			beq		minh_lim
			
			lda 	period_minl
			cmp 	#$09
			beq		minl_lim
			jmp 	crono_end

segl_lim:
			lda		#$00
			sta		period_segl
			
			lda		period_segh
			add		#$01
			sta		period_segl			
            jmp		crono_end
            
segh_lim:
			lda		#$00
			sta		period_segh
			sta		period_segl
			
			lda		period_minl
			add		#$01
			sta		period_minl			
            jmp		crono_end
            
minl_lim:   
			lda		#$00
			sta		period_segh
			sta		period_segl
			sta		period_minl
			
			lda		period_minh
			add		#$01
			sta		period_minh			
            jmp		crono_end  
            
minh_lim:	
			lda		#$05
			cmp		period_minl
			beq		minh_lim1
			jmp 	crono_end
			
minh_lim1:	
			lda		#$00
			sta		period_segh
			sta		period_segl
			sta		period_minl
			sta		period_minh
			lda		#$01
			sta		period1_flag
			jmp 	crono_end

crono_end:
			jmp 	mainLoop		    
            
            
            
            
            
configRTC: 
            lda      #%01010010
;                        ||  |            
;                        ||  +----------------- interrupcion cada segundo 
;                        |+-------------------- Interrupcion temporizada cada 1 segundo habilitada
;                        |+-------------------- IRCLK seleccionado como fuente de reloj del modulo RTC
            sta      SRTISC
            rts


