#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

#define VTPM2CH0 12
#define VTPM2CH1 13
#define encM1A PTGD_PTGD0
#define encM1B PTGD_PTGD1
#define encM2A PTGD_PTGD2
#define encM2B PTGD_PTGD3
#define VRTI 25
#define VSCI 20

#define val_pwm 40

#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

#define SC_IR0_FD (ADC1SC1_ADCO_MASK)
#define SC_IR1_TI (ADC1SC1_ADCO_MASK | ADC1SC1_ADCH0_MASK)
#define SC_IR2_FI (ADC1SC1_ADCO_MASK | ADC1SC1_ADCH1_MASK)
#define SC_IR3_TD (ADC1SC1_ADCO_MASK | ADC1SC1_ADCH0_MASK | ADC1SC1_ADCH1_MASK)
#define SC_IR4_F (ADC1SC1_ADCO_MASK | ADC1SC1_ADCH3_MASK)

volatile char frontal;
volatile char frontali;
volatile char frontald;
volatile char traseroi;
volatile char traserod;

int FrecPWM = 23000; // periodo del PWM en ms
short contadorM1;
short contadorM2;

/////////////////////////////////
int caso = 0;
volatile signed char pwm_mi;
volatile signed char pwm_md;
////////////////////////////////////////

void conf_TPM(void);
void conf_SCI(void);
void conf_RTI(void);
void MD_adelante(int a);
void MD_atras(int a);
void MI_atras(int a);
void MI_adelante(int a);
void sensores(void);
void com(char x);
void retardo(int cont);
void control(void);

void motor_d(signed char nominal);
void motor_i(signed char nominal);

void main(void) {

	/* include your code here */
	SOPT = 0x40;

	PTGDD_PTGDD0 = 0;
	PTGDD_PTGDD1 = 0;
	PTGDD_PTGDD2 = 0;
	PTGDD_PTGDD3 = 0;

	PTFDD_PTFDD4 = 0;
	PTFDD_PTFDD5 = 0;
	PTFPE_PTFPE4 = 0;
	PTFPE_PTFPE5 = 0;

	conf_TPM();
	conf_SCI();
	conf_RTI();
	contadorM1 = 0;
	contadorM2 = 0;

	EnableInterrupts
	;

	FrecPWM = 23000;
	pwm_md = val_pwm;
	pwm_mi = val_pwm;

	for (;;) {
		sensores();

		if (frontal > 130 || frontald > 130 || frontali > 130) {

			caso = 2; //parada emergencia
		}
		if (frontal < 50) {
			sensores();
			if (frontali > 40 && frontald > 40) {
				caso = 1; // hacia adelante en un pasillo

			} else if (frontal > 32) {
				retardo(1);
				sensores();
				if (frontali > 45 && frontald > 45) {
					caso = 5; //sin salida
				}
				if (frontali <= 35) {
					caso = 3; //grio izq
				} else if (frontald <= 30) {
					caso = 4; //giro der
				} else {
					caso = 1;
				}

			}
		}
		caso=1;
		switch (caso) {
		case 1:
			if (frontali > frontald) {
				pwm_md = val_pwm - 1;
				pwm_mi = val_pwm + 1;
			}

			else {
				pwm_md = val_pwm+1;
				pwm_mi = val_pwm-1;

			}
			motor_d(pwm_md);
			motor_i(pwm_mi);

			break;

		case 3:

			while (frontal > 30) {
				motor_d(val_pwm);
				motor_i(val_pwm);
				sensores();
				motor_d(val_pwm);
				motor_i(10);
			}
			motor_d(val_pwm);
			motor_i(val_pwm);
			//retardo(2);

		case 4:

			while (traserod > 40) {
				sensores();
				motor_d(10);
				motor_i(val_pwm);
			}
			motor_d(10);
			motor_i(10);
			//retardo(10);

			break;
		case 5:
			motor_d(val_pwm);
			motor_i(-1 * val_pwm);
			break;
		case 2:
			motor_d(10);
			motor_i(10);
			break;
		} //end case

	} // end for main loop
} //end main loop

void motor_d(signed char nominal) {

	if (nominal > 0) {
		if (nominal > 90) {
			MD_adelante(90);
		} else {
			MD_adelante((short) nominal);
		}
	} else {
		if (nominal < -90) {
			MD_atras(90);
		} else {
			MD_atras((short) -1 * nominal);
		}
	}
	retardo(1);

}
void motor_i(signed char nominal) {

	if (nominal > 0) {
		if (nominal > 90) {
			MI_adelante(90);
		} else {
			MI_adelante((short) nominal);
		}
	} else {
		if (nominal < -90) {
			MI_atras(90);
		} else {
			MI_atras((short) -nominal);
		}
	}

}

void sensores(void) {
	com((char) 0);
	com((char) 0);
	ADC1SC1 = SC_IR4_F;
	while (ADC1SC1_COCO == 0) {
	}
	frontal = ADC1RL;
	com(frontal);

	ADC1SC1 = SC_IR0_FD;
	while (ADC1SC1_COCO == 0) {
	}
	frontald = ADC1RL;
	com(frontald);

	ADC1SC1 = SC_IR2_FI;
	while (ADC1SC1_COCO == 0) {
	}
	frontali = ADC1RL;
	com(frontali);

	ADC1SC1 = SC_IR3_TD;
	while (ADC1SC1_COCO == 0) {
	}
	traserod = ADC1RL;
	com(traserod);

	ADC1SC1 = SC_IR1_TI;
	while (ADC1SC1_COCO == 0) {
	}
	traseroi = ADC1RL;
	com(traseroi);
	com((char) caso);

}

void conf_TPM() {
	//
	// CPWMS = PWM centrado
	// CLKSA = Fuente de reloj BUSCLK
	// PS1 = Divisor de 4, reloj a 1kHz

	TPM1SC = (TPM1SC_CLKSA_MASK | TPM1SC_PS1_MASK);

	// Medio periodo
	TPM1MOD = 43;

	// PWM centrado, High-true pulses (clear output on compare)
	TPM1C0SC = (TPM1C0SC_MS0B_MASK | TPM1C0SC_ELS0B_MASK);
	TPM1C1SC = (TPM1C1SC_MS1B_MASK | TPM1C1SC_ELS1B_MASK);
	TPM1C2SC = (TPM1C2SC_MS2B_MASK | TPM1C2SC_ELS2B_MASK);
	TPM1C3SC = (TPM1C3SC_MS3B_MASK | TPM1C3SC_ELS3B_MASK);
	//ciclo util
	TPM1C0V = 0;
	TPM1C1V = 0;
	TPM1C2V = 0;
	TPM1C3V = 0;

	//Conf lectura encoders:
	TPM2SC = (TPM2SC_CLKSA_MASK | TPM2SC_PS1_MASK);

	TPM2C0SC = (TPM2C0SC_ELS0A_MASK | TPM2C0SC_CH0IE_MASK);
	TPM2C1SC = (TPM2C1SC_ELS1A_MASK | TPM2C1SC_CH1IE_MASK);

}

void MD_adelante(int a) {
	TPM1C0V = (short) ((a * 43) / 100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}
void MD_atras(int a) {
	TPM1C1V = (short) ((a * 43) / 100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}
void MI_atras(int a) {
	TPM1C2V = (short) ((a * 43) / 100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}
void MI_adelante(int a) {
	TPM1C3V = (short) ((a * 43) / 100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}

void conf_SCI(void) {
	////*****************************************
	// comunicacion a 9600 baudios
	// SCI baud rate = BUSCLK/(16xBR)
	// BUSCLK = 4MHz
	// 9600= 4.000.000/(16*26)
	// SBR=0000000011010
	////******************************
	SCI1BDH = 0x00;
	SCI1BDL = 0b00011010;
	////*****************
	//
	//7 LOOPS =0 RxD and TxD use separate pins.
	//6 SCISWAI =0 SCI clocks continue to run in wait mode so the SCI can be the source of an interrupt that wakes up the CPU
	//5 RSRC =0 This bit has no meaning or effect unless the LOOPS bit is set to 1
	//4 M =0 Bit or 8-Bit Mode Select, Normal — start + 8 data bits (LSB First) + stop.
	//3 WAKE =0 Idle-line wakeup
	//2 ILT =0 Idle character bit count starts after start bit.
	//1 PE =0 No hardware parity generation or checking.
	//0 PT =0 Even parity.
	////*****************

	SCI1C1 = 0x00;

	////*******
	//
	//7 TIE =0 Transmit Interrupt Enable (for TDRE), Hardware interrupts from TDRE disabled (use polling).
	//6 TCIE =0 Transmission Complete Interrupt Enable (for TC), Hardware interrupts from TC disabled (use polling).
	//5 RIE =1 Receiver Interrupt Enable (for RDRF), Hardware interrupts from RDRF enabled.
	//4 ILIE =0 Idle Line Interrupt Enable (for IDLE), Hardware interrupts from IDLE disabled (use polling)
	//3 TE =1 Transmitter on.
	//2 RE =1 Receiver on.
	//1 RWU =0 Normal SCI receiver operation.
	//0 SBK =0 Normal transmitter operation.
	////*******
	SCI1C2 = (SCI2C2_TE_MASK);
}

void conf_RTI(void) {
	/////////////////////////////////////////////////////////////////////////////////
	//
	//	bit5=1 usa señal de reloj externo 
	//	bit4=1 interrupciones RTI activadas
	//	bits 2:0 = 000 perido de 8 ms
	/////////////////////////////////////////////////////////////////////////////////
	SRTISC = (SRTISC_RTIS1_MASK | SRTISC_RTIE_MASK | SRTISC_RTIACK_MASK);
}

interrupt VRTI void rutina_RTI(void) {
	SRTISC = (SRTISC | SRTISC_RTIACK_MASK);
	contadorM1 = 0;
	contadorM2 = 0;
}

void configuracion_ADC() {
	////***************
	// Conversion complete interrupt disabled
	// Continuous Conversion Enable
	////**********

	////***************
	// High speed configuration
	// internal clock ADCK = Input clock
	// Short Sample Time Configuration
	// 8-bit conversion mode (N=8)
	// Input clock =Bus CLock
	////**********
	ADC1CFG = 0x00;

	////***************
	// Input Channel Select = 
	////**********
	ADC1SC1 = (ADC1SC1_ADCO_MASK | ADC1SC1_ADCH1_MASK);

	retardo(1000); // Espera que se estabilice el ADC
}

interrupt VTPM2CH1 void rutina_tpm21(void) {
	TPM2C1SC_CH1F = 0;
	if (encM2A == encM2A) {
		contadorM2++;
	} else {
		contadorM2--;
	}
	//Encoder de cuadratura, el sentido de giro se lee por la diferencia en el signo de las señales
}

interrupt VTPM2CH0 void rutina_tpm20(void) {
	TPM2C0SC_CH0F = 0;
	if (encM1A == encM1B) {
		contadorM1++;
	} else {
		contadorM1--;
	}
	//Encoder de cuadratura, el sentido de giro se lee por la diferencia en el signo de las señales
}

void com(char x) {
	SCI1D = x;
	while (SCI1S1_TC == 0) {
	}
}

void retardo(int cont) {
	int n;
	for (n = 0; n < cont; cont++)
		;
}
