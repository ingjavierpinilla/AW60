;*******************************************************************
;* Universidad Nacional de Colombia                                *
;* Facultad de ingeniería mecánica y mecatrónica                   *
;* Microcontroladores 2018-I                                       *
;* Programador:                                                    *
;* -Sebastian Cepeda Espinosa                                      *
;* -Javier Mauricio Pinilla Garcia                    		       *
;* Version: 1.0                                                    *
;* Microcontrolador: MC9S08QG8CPBE                                 *
;* Codigo para usar seleccionar y modificar los tiempos de cada    *
;* periodo de un partido de fultol, descanso y tiempo extra;       *
;* ademas de llevar cuenta de los goles de cada equipo             *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
            

; export symbols
            XDEF _Startup, main, kbirutina
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on
            
            
            
            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition

states: SECTION SHORT
pht:		ds.b   1	; configurando duracion de periodo y descanso
scores:		ds.b   1	; modifica goles
extra:		ds.b   1	; configurando tiempo extra

keyboard: SECTION SHORT
numero:		ds.b   1	; numero pulsado
fkbi:		ds.b   1	; flag kbi
rowa:		ds.b   1	; row actual
row:		ds.b   1	; row activada cuando se dio la interrupcion
col:		ds.b   1   ; col activada cuando se dio la interrupcion
colaux:		ds.b   1

times: SECTION SHORT

t_sel:			ds.b   1 ; 0-> duracion periodo
							 ; 1-> duracion descanso
period_minh:		ds.b   1
period_minl:		ds.b   1
period_segh:		ds.b   1
period_segl:		ds.b   1

ht_minh:		ds.b   1
ht_minl:		ds.b   1
ht_segh:		ds.b   1
ht_segl:		ds.b   1

extra_minh:		ds.b   1
extra_minl:		ds.b   1

displays: SECTION SHORT
numa:		ds.b   1
numb:		ds.b   1
numc:		ds.b   1
numd:		ds.b   1
nume:		ds.b   1
numf:		ds.b   1
numg:		ds.b   1
numh:		ds.b   1

scores_t: SECTION SHORT

scoreA:		ds.b   1
scoreB:		ds.b   1

Interrupciones: SECTION

; =============== Rutina KBI ==========================		
kbirutina: 
        pshh
        bset	KBI1SC_KBACK,KBI1SC   ; Reconocimiento de int y forza la bandera a 0.
        bclr	KBI1SC_KBIE,KBI1SC
        lda		#$01
        bsr		delay
        lda		#$01
        bsr		delay
        lda		#$01
        bsr		delay
        lda		#$01
        bsr		delay	
        
        lda		PTGD
        asra
	nega
        and		#%00000011
        ora		colaux
        sta		colaux
        
        lda		PTDD
        and		#%00001100
        ora		colaux
        sta		colaux
    	
        
        lda		colaux
        and		#%00001111
        sta		col        ; 

loop1:  ;brset 0,PTAD,loop1 
        ;brset 1,PTAD,loop1	
        ;brset 2,PTAD,loop1
        
        lda rowa
        sta	row
		lda #$01
		cmp	fkbi
		beq st11
		bne	st22
		
st11:	
		lda #$00
		sta	fkbi
		bra kbi_fin
		
st22:	
		lda #$01
		sta	fkbi
		bra kbi_fin

kbi_fin:
		 
		
		;bset KBI1SC_KBIE,KBI1SC
		pulh
		rti
		
		
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
            
            lda   #$52
			sta   SOPT ; Desactivar watchdog
            jsr   kbi_conf
            lda   #$01
            sta	  pht ; de inicio se configuran duracion del periodo y descanso
            lda	  #$00
            sta	  scoreA
            sta	  scoreB
            sta	  scores
            sta   extra
			sta	  fkbi
			sta	  row
			sta	  rowa
			sta	  col
			sta   t_sel
			sta   period_minh
			sta   period_minl
			sta   period_segh
			sta   period_segl
			sta   ht_minh
			sta   ht_minl
			sta   ht_segh
			sta   ht_segl
			sta   extra_minh
			sta   extra_minl
			sta   numero
			sta   numa
			sta   numb
			sta   numc
			sta   numd
			sta   nume
			sta   numf
			sta   numg
			sta   numh
			lda   #$0A
            sta   numero
            ;0 in
            lda		PTBDD
            ora		#%00001111
            ;		      ||||	         W ports, rows
            ;		      |||+-----row 1
            ;		      ||+------row 2
            ;		      |+-------row 3		
            ;		      +--------row 4
            					
            sta		PTBDD
            	
            bclr 	3,PTDDD;	R col4		
            bclr 	2,PTDDD;	R col3
            bclr 	2,PTGDD;	R col2		
            bclr 	1,PTGDD;	R col1	
     
       
            
            
            
            
			CLI			; enable interrupts

mainLoop:
            bset KBI1SC_KBIE,KBI1SC
            lda   #$01
			cmp   fkbi
			beq   ver0

rows:
            NOP
            lda		PTBD
            and		#%11110000
            ora		#%00000001	;row 1 = 1
			sta		PTBD
			lda     #$01
			sta		rowa
			
			NOP
			lda		PTBD
            and		#%11110000
            ora		#%00000010	;row 2 = 1
			sta		PTBD
			lda     #$02
			sta		rowa
			
			NOP
			lda		PTBD
            and		#%11110000
            ora		#%00000100	;row 3 = 1
			sta		PTBD
			lda     #$03
			sta		rowa
			
			NOP
			lda		PTBD
            and		#%11110000
            ora		#%00001000	;row 4 = 1
			sta		PTBD
			lda     #$04
			sta		rowa

            BRA    mainLoop





ver0:
			lda		#$01
			cmp		row
			bne		ver1
			brset	0,col,num1	;col 1 = 1
			brset	1,col,num2	;col 2 = 1
			brset	2,col,num3	;col 3 = 1
			brset   3,col,A_key0
A_key0:		jmp 	A_key
			;brset	3,col,A_key ;col 4 = 1
			
ver1:		NOP
			lda		#$02
			cmp		row
			bne		ver2
			brset	0,col,num4	;col 1 = 1
			brset	1,col,num5	;col 2 = 1
			brset	2,col,num6	;col 3 = 1
			brset   3,col,B_key0
B_key0:		jmp 	B_key

			;brset	3,col,B_key ;col 4 = 1


ver2:		lda		#$03
			cmp		row
			bne		ver3
			brset	0,col,num7	;col 1 = 1
			brset	1,col,num8	;col 2 = 1
			brset	2,col,num9	;col 3 = 1
			brset	3,col,C_key  	;col 4 = 1
            
ver3:			
			brset	0,col,star	;col 1 = 1
			brset	1,col,num0	;col 2 = 1
			brset	2,col,pound	;col 3 = 1
			brset	3,col,D_key ;col 4 = 1


			
num1:		lda		#$01
			sta		numero
			jmp 	clrfkbi
			
num2:		lda		#$02
			sta		numero
			jmp 	clrfkbi
			
num3:		lda		#$03
			sta		numero
			jmp 	clrfkbi
			
num4:		lda		#$04
			sta		numero
			jmp 	clrfkbi
			
num5:		lda		#$05
			sta		numero
			jmp 	clrfkbi

num6:		lda		#$06
			sta		numero
			jmp 	clrfkbi
			
num7:		lda		#$07
			sta		numero
			jmp 	clrfkbi
			
num8:		lda		#$08
			sta		numero
			jmp 	clrfkbi
			
num9:		lda		#$09
			sta		numero
			jmp 	clrfkbi
			
num0:		lda		#$00
			sta		numero
			jmp 	clrfkbi

pound:		;team goal 2

			lda		scoreB
			add		#$01
			sta		scoreB
			jmp 	clrfkbi

star:		;team goal 1
			lda		scoreA
			add		#$01
			sta		scoreA
			jmp 	clrfkbi
			

A_key:			;start
			lda     #$00
			sta		pht
			sta		extra
			lda     #$01
			sta		scores
			jmp 	clrfkbi

D_key:			;reset
			jmp 	clrfkbi
			
			
			
C_key:			;HT
			lda #$01
			cmp	extra
			beq cs11
			bne	cs22
		
cs11:					
			lda #$00
			sta	extra
			lda #$01
			sta	scores
			bra clrfkbi
		
cs22:					
			lda #$01
			sta	extra
			lda #$00
			sta	scores
			sta numg
			sta numh
            jmp 	clrfkbi
            



B_key:			;rotar entre tiempos
			lda #$00
			sta numa
			sta numb
			sta numc
			sta numd
			
			lda #$01
			cmp	t_sel
			beq cs1
			bne	cs2
		
cs1:		lda numa		; si sel_tiempo estaba en 1 guarda los datos de numa-numd en descanso
			sta	ht_minh
			lda numb		
			sta	ht_minl	
			lda numc	
			sta	ht_segh
			lda numd		
			sta	ht_segl
			
			lda #$00
			sta	t_sel
			bra clrfkbi
		
cs2:		lda numa       ;si sel_tiempo estaba en 1 guarda los datos de numa-numd en periodo
			sta	period_minh
			lda numb		
			sta	period_minl	
			lda numc	
			sta	period_segh
			lda numd		
			sta	period_segl
					
			lda #$01
			sta	t_sel
			jmp clrfkbi
			
clrfkbi:	lda		#$00
			sta		fkbi
			lda     #$01
			cmp	    pht
			beq		clrfkbi_B 
			cmp		scores
			beq		clrfkbi_scores
			cmp		extra
			beq		clrfkbi_extra  

clrfkbi_B:			
			lda 	numd
			sta		numc
			
			lda 	numc
			sta		numb
			
			lda 	numb
			sta		numa
			
			lda 	numero
			sta		numd
			
			
			jmp		mainLoop

clrfkbi_scores:
			lda		scoreA
			sta		nume
			lda		scoreB
			sta		numf
			jmp		mainLoop
			
			
clrfkbi_extra:
			lda 	numh
			sta		numg
			sta		extra_minh
			
			lda 	numero
			sta		numh
			sta		extra_minl
			jmp		mainLoop





 ;***********************************************************************************;
 ;			                 Configuracion del KBI                                   ;   
 ;                                                                                   ;
 ; KBI1SC_MOD= 1b1 --> detecta flanco y nivel                                        ;
 ;                                                                                   ;
 ; KBIP5 - KBIP6 habilitados como kbi detectando flanco y nivel alto                 ;
 ; D2      D3                                                                        ;
 ; KBIP1 - KBIP2 habilitados como kbi detectando flanco y nivel bajo                 ;
 ; G1      G2                                                                        ;
 ;***********************************************************************************;           
kbi_conf:
			lda	  #%01100001
			sta	  KBI1SC		;1 IE=0, MOD=1, rising lvl 5-6
			
			lda   #%00001100
			sta   PTDPE		;3 Configurar pullup de los pines ausar
			lda	  #%00000110
			sta	  PTGPE
			
			lda   #%01100110
			sta	  KBI1PE		;4 PTB3 como KBI, configurar pin KBI a usar
			lda	  KBI1SC
			ora	  #%00000100
			sta	  KBI1SC		;5 ACK=1
			lda	  KBI1SC
			ora	  #%00000011
			sta	  KBI1SC		;6 IE=1, MOD=1
			rts

delay: 	
rt1:		psha
			lda		#$ff
rt2:		
			dbnza	rt2
			pula
			dbnza	rt1
			rts
